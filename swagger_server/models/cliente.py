# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Cliente(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, titular: str=None, cpf: str=None, senha: str=None, contas: List[Conta]=None):  # noqa: E501
        """Cliente - a model defined in Swagger

        :param id: The id of this Cliente.  # noqa: E501
        :type id: int
        :param titular: The titular of this Cliente.  # noqa: E501
        :type titular: str
        :param cpf: The cpf of this Cliente.  # noqa: E501
        :type cpf: str
        :param senha: The senha of this Cliente.  # noqa: E501
        :type senha: str
        :param contas: The contas of this Cliente.  # noqa: E501
        :type contas: List[Conta]
        """
        self.swagger_types = {
            'id': int,
            'titular': str,
            'cpf': str,
            'senha': str,
            'contas': List[Conta]
        }

        self.attribute_map = {
            'id': 'id',
            'titular': 'titular',
            'cpf': 'cpf',
            'senha': 'senha',
            'contas': 'contas'
        }

        self._id = id
        self._titular = titular
        self._cpf = cpf
        self._senha = senha
        self._contas = contas

    @classmethod
    def from_dict(cls, dikt) -> 'Cliente':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Cliente of this Cliente.  # noqa: E501
        :rtype: Cliente
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Cliente.


        :return: The id of this Cliente.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Cliente.


        :param id: The id of this Cliente.
        :type id: int
        """

        self._id = id

    @property
    def titular(self) -> str:
        """Gets the titular of this Cliente.


        :return: The titular of this Cliente.
        :rtype: str
        """
        return self._titular

    @titular.setter
    def titular(self, titular: str):
        """Sets the titular of this Cliente.


        :param titular: The titular of this Cliente.
        :type titular: str
        """

        self._titular = titular

    @property
    def cpf(self) -> str:
        """Gets the cpf of this Cliente.


        :return: The cpf of this Cliente.
        :rtype: str
        """
        return self._cpf

    @cpf.setter
    def cpf(self, cpf: str):
        """Sets the cpf of this Cliente.


        :param cpf: The cpf of this Cliente.
        :type cpf: str
        """
        if cpf is not None and len(cpf) > 11:
            raise ValueError("Invalid value for `cpf`, length must be less than or equal to `11`")  # noqa: E501
        if cpf is not None and len(cpf) < 11:
            raise ValueError("Invalid value for `cpf`, length must be greater than or equal to `11`")  # noqa: E501

        self._cpf = cpf

    @property
    def senha(self) -> str:
        """Gets the senha of this Cliente.


        :return: The senha of this Cliente.
        :rtype: str
        """
        return self._senha

    @senha.setter
    def senha(self, senha: str):
        """Sets the senha of this Cliente.


        :param senha: The senha of this Cliente.
        :type senha: str
        """

        self._senha = senha

    @property
    def contas(self) -> List[Conta]:
        """Gets the contas of this Cliente.


        :return: The contas of this Cliente.
        :rtype: List[Conta]
        """
        return self._contas

    @contas.setter
    def contas(self, contas: List[Conta]):
        """Sets the contas of this Cliente.


        :param contas: The contas of this Cliente.
        :type contas: List[Conta]
        """

        self._contas = contas
